{"version":3,"sources":["components/Kanji.js","components/CardList.js","components/SearchBox.js","actions/actions.js","constants.js","containers/App.js","reducers/reducers.js","serviceWorker.js","index.js"],"names":["Kanji","_ref","word","kanji","onClickDelete","react_default","a","createElement","className","type","id","onClick","CardList","wordList","list","isLoaded","length","map","char","idx","components_Kanji","key","SearchBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","input","target","value","state","bind","assertThisInitialized","handleSubmit","preventDefault","submitWord","onSubmit","size","onChange","React","Component","fetch","require","requestKanji","dispatch","concat","headers","X-RapidAPI-Key","then","response","json","callAPI","res","payload","character","catch","error","alert","App","timeElapsed","correctMatches","populateInitialList","_this2","defaultList","forEach","item","onRequestKanji","e","getAttribute","newWordList","filter","elem","onUpdateList","_this$props","components_SearchBox","components_CardList","connect","DefaultList","kanjiReducer","updateList","initialStateDefaultList","initialStateKanji","isPending","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","arguments","undefined","action","objectSpread","toConsumableArray","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1753d3a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Kanji = ({word, kanji, onClickDelete}) => {\n  return (\n    <div className = 'tc bg-light-green dib br3 pa3 ma2 shadow-hover bw2 shadow-5'>\n        <h2 className = 'f1'>{kanji}</h2>\n        <p> {word}</p>\n        <button \n          type = \"button\"\n          id = {word}\n          onClick = {onClickDelete}\n          className = 'f7 bg-light-blue br3' \n          >\n          remove\n        </button>\n    </div>\n  );\n};\n\nexport default Kanji;\n","import React from 'react';\nimport Kanji from './Kanji.js';\n\nconst CardList = ({wordList, onClickDelete, isLoaded}) => {\n  const list = wordList || []\n\n  return (\n    <div>\n      {\n        list.length > 0 ? // ternary operator\n        wordList.map((char, idx) => {\n            return <Kanji \n              key={idx} \n              word={char.word} \n              kanji={char.kanji} \n              onClickDelete={onClickDelete}/>\n        }) : \n        (<span>I got nothing</span>)\n      }\n    </div>\n  );\n};\n\nexport default CardList\n","import React from 'react';\n\nclass SearchBox extends React.Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  // updates the input field as the user types into input, and turns form into a controlled component.\n  handleChange = (event) => {\n    this.setState({input: event.target.value});\n  };\n\n  handleSubmit(event) {\n    event.preventDefault();\n    this.props.submitWord(this.state.input);\n    this.setState({input: ''}); // resets the state.input value which resets the rendered value in input box\n  };\n\n  render() {\n    return (\n      <form \n        className = 'pa3 ba b--green bg-lightest-blue'\n        onSubmit = {this.handleSubmit} >\n        <label>Additional Vocabulary Words: \n          <input \n            id=\"inputKanji\" \n            type=\"text\" \n            size=\"20\"\n            onChange={this.handleChange}\n            value = {this.state.input} // for controlled component, state controls values\n            />\n        </label>\n        <input \n          type=\"submit\" \n          value='submit'\n          />\n      </form>\n    );\n  }\n}\n\nexport default SearchBox;","import {\n  CHANGE_DEFAULT_LIST,\n  REQUEST_KANJI_PENDING,\n  REQUEST_KANJI_SUCCESS,\n  REQUEST_KANJI_FAILED,\n  UPDATE_LIST\n} from '../constants.js'\nvar fetch = require(\"node-fetch\");\n\n\n// ============ set the default list to state, so it can populate ============\nexport const setDefaultList = (text) => {\n  return {\n    type: CHANGE_DEFAULT_LIST,\n    payload: text\n  }\n};\n\n\n// ============= update wordList array with word object removed  ===============\nexport const updateList = (list) => {\n  return {\n    type: UPDATE_LIST,\n    payload: list\n  }\n}\n\n// ============= API Call Actions ==================\n\n//need to figure out a way to give the user a message if they input an uncommon word\n// takes a word and uses it to make an API call, returns a promise.json();\nconst callAPI = (word) => {\n  return fetch (`https://kanjialive-api.p.rapidapi.com/api/public/search/${word}` \n      ,{headers:{\"X-RapidAPI-Key\": \"248efa6aa8msh5005b7a79ccea0ap133b74jsn6fc7e3d0b298\"}})\n      .then(response => response.json() ) // parses then pushes each character to array\n};\n\n// returns a function which triggers redux-thunk, which gives it to dispatch\nexport const requestKanji = (word) => (dispatch) => {\n  dispatch({type: REQUEST_KANJI_PENDING});\n  callAPI(word)\n    .then(res => dispatch(\n      {type:REQUEST_KANJI_SUCCESS, payload: {word: word, kanji: res[0].kanji.character}}\n    ))\n    .catch(error => {\n      alert(`${word} is not in the list of commonly used kanji. Try a different word`)\n      dispatch({type: REQUEST_KANJI_FAILED, payload: error})\n    })\n};","export const CHANGE_DEFAULT_LIST = 'CHANGE_DEFAULT_LIST';\n\nexport const UPDATE_LIST = 'UPDATE_LIST';\n\n\nexport const REQUEST_KANJI_PENDING = 'REQUEST_KANJI_PENDING';\nexport const REQUEST_KANJI_SUCCESS = 'REQUEST_KANJI_SUCCESS';\nexport const REQUEST_KANJI_FAILED = 'REQUEST_KANJI_FAILED';","import React, { Component } from 'react';\nimport {connect} from 'react-redux';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js';\nimport './App.css';\nimport {requestKanji, updateList} from '../actions/actions.js';\n \n\nconst mapStateToProps = state => {\n  return {\n    defaultList: state.DefaultList.defaultList,\n    wordList: state.kanjiReducer.wordList\n  }\n}\n\n// the dispatch is what sends the actions object to the reducer\n// we get dispatch from redux\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRequestKanji: (word) => dispatch(requestKanji(word)), //redux-thunks comes in here.\n    onUpdateList: (list) => dispatch(updateList(list))\n  };\n};\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      // default list of kanji wordList \n      timeElapsed: 0, // the amount of time elapsed since user started game\n      correctMatches: 0, // the number of correct matches so far\n      isLoaded: false,\n    }\n\n    // binds the method so that 'this' always refers to app class. Better than arrow functions.\n    this.populateInitialList = this.populateInitialList.bind(this);\n    this.onClickDelete = this.onClickDelete.bind(this);\n  };\n  \n\n  // this call is no longer asynchronos because that has been moved into the \n  // actions, and is now hanlded by reduce and redux-thunk.\n  populateInitialList() {\n    this.props.defaultList.forEach((item) => {\n      this.props.onRequestKanji(item)\n    });\n\n    this.setState({\n      isLoaded: true,\n    });\n  }\n\n  // updates state to remove cards when remove button is clicked\n  onClickDelete(e) {\n    // ids of the cards are set equal to the word\n    const id = e.target.getAttribute('id')\n    // filter out the card whose 'remove' button was clicked\n    const newWordList = this.props.wordList.filter(elem => {\n      return elem.word !== id;\n    })\n    this.props.onUpdateList(newWordList);\n  }\n\n  componentDidMount(){\n    // calls function to populate the wordlist with the default words\n    this.populateInitialList();\n  }\n\n  render() {\n    const {wordList, onRequestKanji} = this.props;\n    return (\n        <div className=\"tc\">\n          <h1 className='f1'>Kanji Match</h1>\n          <SearchBox submitWord = {onRequestKanji} />\n          <CardList \n            wordList = {wordList} \n            onClickDelete = {this.onClickDelete} \n            isLoaded={this.state.isLoaded} \n          />\n        </div>\n      );\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_DEFAULT_LIST,\n  REQUEST_KANJI_PENDING,\n  REQUEST_KANJI_SUCCESS,\n  REQUEST_KANJI_FAILED,\n  UPDATE_LIST\n} from '../constants.js'\n\nconst initialStateDefaultList = {\n  defaultList : ['dog','cat','bird', 'cow', 'love', 'blue'], \n}\n\nconst initialStateKanji = {\n  isPending: false,\n  wordList: [],\n  error: ''\n}\n\nexport const DefaultList = (state=initialStateDefaultList, action={}) => {\n  switch(action.type){\n    case CHANGE_DEFAULT_LIST:\n      return {...state, defaultList: action.payload};\n    default:\n      return state;\n  }\n};\n\nexport const kanjiReducer = (state=initialStateKanji, action={}) => {\n  switch(action.type){\n    case REQUEST_KANJI_PENDING:\n      return {...state, isPending: true};\n    case REQUEST_KANJI_SUCCESS:\n      return {\n        ...state, \n        wordList: [...state.wordList, action.payload], \n        isPending: false\n      };\n    case REQUEST_KANJI_FAILED:\n      return {...state, error: action.payload, isPending: false};\n    case UPDATE_LIST:\n      return {...state, wordList: action.payload};\n    default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers, compose} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport { DefaultList, kanjiReducer } from './reducers/reducers';\nimport * as serviceWorker from './serviceWorker';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({DefaultList, kanjiReducer: kanjiReducer}); \n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(\n  applyMiddleware(thunkMiddleware, logger) ));\n\n\nReactDOM.render(\n                <Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}